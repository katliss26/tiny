
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
<<<<<<< HEAD
// Sat Apr 11 06:14:52 VET 2015
=======
// Sat Apr 11 21:01:02 VET 2015
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
<<<<<<< HEAD
  * @version Sat Apr 11 06:14:52 VET 2015
=======
  * @version Sat Apr 11 21:01:02 VET 2015
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\047\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\007\000\002" +
    "\005\011\000\002\006\006\000\002\020\002\000\002\007" +
    "\006\000\002\010\004\000\002\011\004\000\002\017\004" +
    "\000\002\017\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\005\000\002" +
    "\016\003" });
=======
    "\000\065\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\011\000" +
    "\002\006\011\000\002\006\011\000\002\010\005\000\002" +
    "\010\004\000\002\011\010\000\002\011\007\000\002\007" +
    "\006\000\002\007\006\000\002\007\004\000\002\007\004" +
    "\000\002\005\005\000\002\005\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\013" +
    "\007\000\002\013\011\000\002\014\006\000\002\015\014" +
    "\000\002\025\002\000\002\016\006\000\002\017\004\000" +
    "\002\020\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\003" });
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\106\000\022\003\023\004\010\006\005\013\020\017" +
    "\006\023\004\024\022\025\021\001\002\000\004\025\110" +
    "\001\002\000\004\025\100\001\002\000\022\003\023\004" +
    "\010\006\005\013\020\017\006\023\004\024\022\025\021" +
    "\001\002\000\014\002\ufffc\015\ufffc\016\ufffc\020\ufffc\044" +
    "\ufffc\001\002\000\004\025\100\001\002\000\014\002\ufffd" +
    "\015\ufffd\016\ufffd\020\ufffd\044\ufffd\001\002\000\014\002" +
    "\ufff9\015\ufff9\016\ufff9\020\ufff9\044\ufff9\001\002\000\014" +
    "\002\ufff8\015\ufff8\016\ufff8\020\ufff8\044\ufff8\001\002\000" +
    "\014\002\ufffe\015\ufffe\016\ufffe\020\ufffe\044\ufffe\001\002" +
    "\000\014\002\ufffb\015\ufffb\016\ufffb\020\ufffb\044\ufffb\001" +
    "\002\000\004\002\077\001\002\000\014\002\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\044\ufffa\001\002\000\012\003\031\025" +
    "\030\026\027\042\035\001\002\000\004\027\ufff3\001\002" +
    "\000\012\003\031\025\030\026\027\042\035\001\002\000" +
    "\014\002\ufff7\015\ufff7\016\ufff7\020\ufff7\044\ufff7\001\002" +
    "\000\006\002\001\044\025\001\002\000\022\003\023\004" +
    "\010\006\005\013\020\017\006\023\004\024\022\025\021" +
    "\001\002\000\014\002\uffff\015\uffff\016\uffff\020\uffff\044" +
    "\uffff\001\002\000\044\002\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf" +
    "\001\002\000\044\002\uffde\014\uffde\015\uffde\016\uffde\020" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\044\uffde\001" +
    "\002\000\044\002\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\001\002" +
    "\000\044\002\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\001\002\000" +
    "\044\002\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\054\041\053\043\uffe4\044\uffe4\001\002\000\040" +
    "\002\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\030\042\031" +
    "\041\032\043\033\046\034\045\035\050\036\044\037\047" +
    "\043\uffe7\044\uffe7\001\002\000\012\003\031\025\030\026" +
    "\027\042\035\001\002\000\014\002\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\044\ufff0\001\002\000\004\043\040\001\002\000" +
    "\044\002\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\001\002\000\012" +
    "\003\031\025\030\026\027\042\035\001\002\000\012\003" +
    "\031\025\030\026\027\042\035\001\002\000\012\003\031" +
    "\025\030\026\027\042\035\001\002\000\012\003\031\025" +
    "\030\026\027\042\035\001\002\000\012\003\031\025\030" +
    "\026\027\042\035\001\002\000\012\003\031\025\030\026" +
    "\027\042\035\001\002\000\012\003\031\025\030\026\027" +
    "\042\035\001\002\000\012\003\031\025\030\026\027\042" +
    "\035\001\002\000\024\002\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\020\uffe8\036\044\037\047\043\uffe8\044\uffe8\001\002\000" +
    "\044\002\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\054\041\053\043\uffe5\044\uffe5\001\002\000\012" +
    "\003\031\025\030\026\027\042\035\001\002\000\012\003" +
    "\031\025\030\026\027\042\035\001\002\000\044\002\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\020\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\043\uffe3\044\uffe3\001\002\000\044\002\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\020\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\043\uffe2\044\uffe2\001\002\000\024\002\uffea\014\uffea" +
    "\015\uffea\016\uffea\020\uffea\036\044\037\047\043\uffea\044" +
    "\uffea\001\002\000\024\002\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\020\uffeb\036\044\037\047\043\uffeb\044\uffeb\001\002\000" +
    "\044\002\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\054\041\053\043\uffe6\044\uffe6\001\002\000\024" +
    "\002\uffec\014\uffec\015\uffec\016\uffec\020\uffec\036\044\037" +
    "\047\043\uffec\044\uffec\001\002\000\024\002\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\020\uffe9\036\044\037\047\043\uffe9\044" +
    "\uffe9\001\002\000\024\002\uffed\014\uffed\015\uffed\016\uffed" +
    "\020\uffed\036\044\037\047\043\uffed\044\uffed\001\002\000" +
    "\004\027\066\001\002\000\012\003\031\025\030\026\027" +
    "\042\035\001\002\000\014\002\ufff2\015\ufff2\016\ufff2\020" +
    "\ufff2\044\ufff2\001\002\000\004\014\071\001\002\000\022" +
    "\003\023\004\010\006\005\013\020\017\006\023\004\024" +
    "\022\025\021\001\002\000\010\015\073\016\074\044\025" +
    "\001\002\000\022\003\023\004\010\006\005\013\020\017" +
    "\006\023\004\024\022\025\021\001\002\000\014\002\ufff6" +
    "\015\ufff6\016\ufff6\020\ufff6\044\ufff6\001\002\000\006\016" +
    "\076\044\025\001\002\000\014\002\ufff5\015\ufff5\016\ufff5" +
    "\020\ufff5\044\ufff5\001\002\000\004\002\000\001\002\000" +
    "\016\002\uffdb\012\102\015\uffdb\016\uffdb\020\uffdb\044\uffdb" +
    "\001\002\000\014\002\uffee\015\uffee\016\uffee\020\uffee\044" +
    "\uffee\001\002\000\004\025\100\001\002\000\014\002\uffdc" +
    "\015\uffdc\016\uffdc\020\uffdc\044\uffdc\001\002\000\006\020" +
    "\105\044\025\001\002\000\012\003\031\025\030\026\027" +
    "\042\035\001\002\000\014\002\ufff4\015\ufff4\016\ufff4\020" +
    "\ufff4\044\ufff4\001\002\000\014\002\uffef\015\uffef\016\uffef" +
    "\020\uffef\044\uffef\001\002\000\014\002\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\044\ufff1\001\002" });
=======
    "\000\200\000\012\004\011\005\012\006\013\007\006\001" +
    "\002\000\004\002\202\001\002\000\004\002\ufffe\001\002" +
    "\000\020\003\047\015\045\021\035\023\037\024\034\025" +
    "\050\026\046\001\002\000\012\004\011\005\012\006\013" +
    "\007\006\001\002\000\004\002\001\001\002\000\004\011" +
    "\167\001\002\000\004\011\153\001\002\000\004\011\014" +
    "\001\002\000\004\026\015\001\002\000\004\043\016\001" +
    "\002\000\010\004\021\006\022\044\017\001\002\000\004" +
    "\007\033\001\002\000\004\044\031\001\002\000\004\026" +
    "\026\001\002\000\004\026\023\001\002\000\006\014\024" +
    "\044\ufff0\001\002\000\006\004\021\006\022\001\002\000" +
    "\004\044\ufff1\001\002\000\006\014\027\044\uffef\001\002" +
    "\000\006\004\021\006\022\001\002\000\004\044\ufff2\001" +
    "\002\000\004\007\033\001\002\000\012\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\001\002\000\022\003\047\013\052\015" +
    "\045\021\035\023\037\024\034\025\050\026\046\001\002" +
    "\000\004\026\151\001\002\000\020\003\047\015\045\021" +
    "\035\023\037\024\034\025\050\026\046\001\002\000\014" +
    "\013\uffeb\017\uffeb\020\uffeb\022\uffeb\045\uffeb\001\002\000" +
    "\004\043\135\001\002\000\014\013\uffec\017\uffec\020\uffec" +
    "\022\uffec\045\uffec\001\002\000\014\013\uffe7\017\uffe7\020" +
    "\uffe7\022\uffe7\045\uffe7\001\002\000\014\013\uffed\017\uffed" +
    "\020\uffed\022\uffed\045\uffed\001\002\000\014\013\uffe9\017" +
    "\uffe9\020\uffe9\022\uffe9\045\uffe9\001\002\000\014\013\uffe8" +
    "\017\uffe8\020\uffe8\022\uffe8\045\uffe8\001\002\000\012\003" +
    "\056\026\055\027\054\043\062\001\002\000\004\030\uffe1" +
    "\001\002\000\014\013\uffe6\017\uffe6\020\uffe6\022\uffe6\045" +
    "\uffe6\001\002\000\012\003\056\026\055\027\054\043\062" +
    "\001\002\000\006\013\114\045\115\001\002\000\012\003" +
    "\056\026\055\027\054\043\062\001\002\000\014\013\uffea" +
    "\017\uffea\020\uffea\022\uffea\045\uffea\001\002\000\044\013" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\044\uffcf\045\uffcf\001\002\000\044\013\uffce" +
    "\016\uffce\017\uffce\020\uffce\022\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\044\uffce\045\uffce\001\002\000\044\013\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\022\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\045\uffcd\001\002\000\044\013\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\022\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\102\042\101" +
    "\044\uffd4\045\uffd4\001\002\000\044\013\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\022\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\045\uffd1\001\002\000\010\037\071\040\073\045\112" +
    "\001\002\000\012\003\056\026\055\027\054\043\062\001" +
    "\002\000\040\013\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7" +
    "\031\067\032\066\033\070\034\074\035\072\036\075\037" +
    "\071\040\073\044\uffd7\045\uffd7\001\002\000\004\044\065" +
    "\001\002\000\044\013\uffd0\016\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\001" +
    "\002\000\012\003\056\026\055\027\054\043\062\001\002" +
    "\000\012\003\056\026\055\027\054\043\062\001\002\000" +
    "\012\003\056\026\055\027\054\043\062\001\002\000\012" +
    "\003\056\026\055\027\054\043\062\001\002\000\012\003" +
    "\056\026\055\027\054\043\062\001\002\000\012\003\056" +
    "\026\055\027\054\043\062\001\002\000\012\003\056\026" +
    "\055\027\054\043\062\001\002\000\012\003\056\026\055" +
    "\027\054\043\062\001\002\000\024\013\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\037\071\040\073\044\uffd8\045\uffd8" +
    "\001\002\000\024\013\uffda\016\uffda\017\uffda\020\uffda\022" +
    "\uffda\037\071\040\073\044\uffda\045\uffda\001\002\000\044" +
    "\013\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\102\042\101\044\uffd5\045\uffd5\001\002\000\012\003" +
    "\056\026\055\027\054\043\062\001\002\000\012\003\056" +
    "\026\055\027\054\043\062\001\002\000\044\013\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\022\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\045\uffd3\001\002\000\044\013\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\022\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\044\uffd2\045\uffd2\001\002\000\024\013\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\022\uffdb\037\071\040\073\044\uffdb\045\uffdb" +
    "\001\002\000\044\013\uffd6\016\uffd6\017\uffd6\020\uffd6\022" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\102\042\101\044\uffd6\045\uffd6\001" +
    "\002\000\024\013\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc" +
    "\037\071\040\073\044\uffdc\045\uffdc\001\002\000\024\013" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\037\071\040\073" +
    "\044\uffd9\045\uffd9\001\002\000\024\013\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\022\uffdd\037\071\040\073\044\uffdd\045\uffdd" +
    "\001\002\000\004\020\113\001\002\000\012\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\001\002\000\012\003\056\026\055" +
    "\027\054\043\062\001\002\000\020\003\047\015\045\021" +
    "\035\023\037\024\034\025\050\026\046\001\002\000\014" +
    "\013\uffee\017\uffee\020\uffee\022\uffee\045\uffee\001\002\000" +
    "\010\037\071\040\073\045\120\001\002\000\004\020\121" +
    "\001\002\000\012\004\ufff4\005\ufff4\006\ufff4\007\ufff4\001" +
    "\002\000\014\013\uffde\017\uffde\020\uffde\022\uffde\045\uffde" +
    "\001\002\000\004\030\124\001\002\000\012\003\056\026" +
    "\055\027\054\043\062\001\002\000\016\013\uffe0\017\uffe0" +
    "\020\uffe0\022\uffe0\044\uffe0\045\uffe0\001\002\000\004\016" +
    "\127\001\002\000\020\003\047\015\045\021\035\023\037" +
    "\024\034\025\050\026\046\001\002\000\010\017\131\020" +
    "\132\045\115\001\002\000\020\003\047\015\045\021\035" +
    "\023\037\024\034\025\050\026\046\001\002\000\014\013" +
    "\uffe5\017\uffe5\020\uffe5\022\uffe5\045\uffe5\001\002\000\006" +
    "\020\134\045\115\001\002\000\014\013\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\045\uffe4\001\002\000\004\026\046\001\002" +
    "\000\004\045\137\001\002\000\012\003\056\026\055\027" +
    "\054\043\062\001\002\000\004\045\141\001\002\000\004" +
    "\026\046\001\002\000\004\044\143\001\002\000\020\003" +
    "\047\015\045\021\035\023\037\024\034\025\050\026\046" +
    "\001\002\000\006\020\145\045\115\001\002\000\014\013" +
    "\uffe2\017\uffe2\020\uffe2\022\uffe2\045\uffe2\001\002\000\006" +
    "\022\147\045\115\001\002\000\012\003\056\026\055\027" +
    "\054\043\062\001\002\000\014\013\uffe3\017\uffe3\020\uffe3" +
    "\022\uffe3\045\uffe3\001\002\000\014\013\uffdf\017\uffdf\020" +
    "\uffdf\022\uffdf\045\uffdf\001\002\000\012\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\001\002\000\004\026\154\001\002\000" +
    "\004\043\155\001\002\000\010\004\021\006\022\044\156" +
    "\001\002\000\004\007\162\001\002\000\004\044\160\001" +
    "\002\000\004\007\162\001\002\000\012\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\001\002\000\022\003\047\015\045\020" +
    "\164\021\035\023\037\024\034\025\050\026\046\001\002" +
    "\000\006\020\165\045\115\001\002\000\012\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\001\002\000\012\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\001\002\000\012\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\001\002\000\004\026\170\001\002\000\004" +
    "\043\171\001\002\000\010\004\021\006\022\044\172\001" +
    "\002\000\004\007\033\001\002\000\004\044\174\001\002" +
    "\000\004\007\033\001\002\000\012\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\001\002\000\012\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\001\002\000\004\002\uffff\001\002\000\006\020" +
    "\201\045\115\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\000\001\002" });
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
<<<<<<< HEAD
    "\000\106\000\024\002\015\003\023\004\013\005\010\006" +
    "\006\007\014\010\016\011\011\017\012\001\001\000\002" +
    "\001\001\000\004\016\106\001\001\000\022\003\103\004" +
    "\013\005\010\006\006\007\014\010\016\011\011\017\012" +
    "\001\001\000\002\001\001\000\004\016\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\067\013\033\014\032\015\031\001\001" +
    "\000\004\020\064\001\001\000\012\012\035\013\033\014" +
    "\032\015\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\025\005\010\006\006\007\014\010\016\011" +
    "\011\017\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\036\013\033" +
    "\014\032\015\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\063\014\032\015\031" +
    "\001\001\000\010\013\062\014\032\015\031\001\001\000" +
    "\010\013\061\014\032\015\031\001\001\000\006\014\060" +
    "\015\031\001\001\000\010\013\057\014\032\015\031\001" +
    "\001\000\010\013\056\014\032\015\031\001\001\000\006" +
    "\014\051\015\031\001\001\000\010\013\050\014\032\015" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\055\001\001\000\004\015\054\001\001\000\002\001" +
=======
    "\000\200\000\012\002\003\003\007\004\004\006\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\177" +
    "\012\041\013\037\014\035\015\052\016\042\017\043\020" +
    "\040\001\001\000\010\003\176\004\004\006\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\017\001\001\000\004\011\151\001\001\000\002\001" +
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\027\001\001\000\002\001\001\000\004" +
    "\011\031\001\001\000\002\001\001\000\022\005\050\012" +
    "\041\013\037\014\035\015\052\016\042\017\043\020\040" +
    "\001\001\000\002\001\001\000\022\005\145\012\041\013" +
    "\037\014\035\015\052\016\042\017\043\020\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
<<<<<<< HEAD
    "\002\001\001\000\002\001\001\000\012\012\066\013\033" +
    "\014\032\015\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\071\004\013\005\010\006\006\007\014" +
    "\010\016\011\011\017\012\001\001\000\002\001\001\000" +
    "\022\003\074\004\013\005\010\006\006\007\014\010\016" +
    "\011\011\017\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\105\013\033\014\032" +
    "\015\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });
=======
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\125\022\062\023\056\024\057\001" +
    "\001\000\004\025\122\001\001\000\002\001\001\000\012" +
    "\021\121\022\062\023\056\024\057\001\001\000\002\001" +
    "\001\000\010\022\060\023\056\024\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\063\022\062\023\056\024\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\110\023\056\024\057\001\001\000\010\022\107\023" +
    "\056\024\057\001\001\000\010\022\106\023\056\024\057" +
    "\001\001\000\006\023\105\024\057\001\001\000\010\022" +
    "\104\023\056\024\057\001\001\000\006\023\077\024\057" +
    "\001\001\000\010\022\076\023\056\024\057\001\001\000" +
    "\010\022\075\023\056\024\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\103\001" +
    "\001\000\004\024\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\116\023\056\024\057\001" +
    "\001\000\020\012\115\013\037\014\035\015\052\016\042" +
    "\017\043\020\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\124\022\062\023\056\024" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\127\012\041\013\037\014\035\015\052\016\042\017" +
    "\043\020\040\001\001\000\002\001\001\000\022\005\132" +
    "\012\041\013\037\014\035\015\052\016\042\017\043\020" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\135\001\001\000\002\001\001\000" +
    "\012\021\137\022\062\023\056\024\057\001\001\000\002" +
    "\001\001\000\004\016\141\001\001\000\002\001\001\000" +
    "\022\005\143\012\041\013\037\014\035\015\052\016\042" +
    "\017\043\020\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\147\022\062\023\056" +
    "\024\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\156\001\001\000\004\010\165\001\001\000\002\001" +
    "\001\000\004\010\160\001\001\000\002\001\001\000\022" +
    "\005\162\012\041\013\037\014\035\015\052\016\042\017" +
    "\043\020\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\172\001\001\000\004\011\175" +
    "\001\001\000\002\001\001\000\004\011\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 38: // dec ::= ID 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
	        /*RESULT=ex;*/
	        System.out.println("\t ID"); 
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dec ::= ID COMA dec 
            {
              NodoBase RESULT =null;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							System.out.println("\t dec"); 
							/*RESULT = new NodoOperacion(exI,tipoOp.por,exD);*/
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= error 
=======
          case 52: // factor ::= error 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 35: // factor ::= ID 
=======
          case 51: // factor ::= ID 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 34: // factor ::= NUM 
=======
          case 50: // factor ::= NUM 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 33: // factor ::= LPAREN exp RPAREN 
=======
          case 49: // factor ::= LPAREN exp RPAREN 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 32: // term ::= factor 
=======
          case 48: // term ::= factor 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 31: // term ::= term OVER factor 
=======
          case 47: // term ::= term OVER factor 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 30: // term ::= term TIMES factor 
=======
          case 46: // term ::= term TIMES factor 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 29: // simple_exp ::= term 
=======
          case 45: // simple_exp ::= term 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 28: // simple_exp ::= simple_exp MINUS term 
=======
          case 44: // simple_exp ::= simple_exp MINUS term 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 27: // simple_exp ::= simple_exp PLUS term 
=======
          case 43: // simple_exp ::= simple_exp PLUS term 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 26: // exp ::= simple_exp 
=======
          case 42: // exp ::= simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 25: // exp ::= simple_exp NEQ simple_exp 
=======
          case 41: // exp ::= simple_exp NEQ simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				  if(modoDepuracion) System.out.println("\t regla 9b"); 
					   RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
				  
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 24: // exp ::= simple_exp EQ simple_exp 
=======
          case 40: // exp ::= simple_exp EQ simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(modoDepuracion) System.out.println("\t regla 9b"); 
					   RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 23: // exp ::= simple_exp GE simple_exp 
=======
          case 39: // exp ::= simple_exp GE simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  
                  if(modoDepuracion) System.out.println("\t regla 9a.3"); 
              	     RESULT = new NodoOperacion(exI,tipoOp.mayor_eq,exD);
                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 22: // exp ::= simple_exp LE simple_exp 
=======
          case 38: // exp ::= simple_exp LE simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      
                      if(modoDepuracion) System.out.println("\t regla 9a.2"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.menor_eq,exD);
                      
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 21: // exp ::= simple_exp GT simple_exp 
=======
          case 37: // exp ::= simple_exp GT simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           
                  	if(modoDepuracion) System.out.println("\t regla 9a.1"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 20: // exp ::= simple_exp LT simple_exp 
=======
          case 36: // exp ::= simple_exp LT simple_exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             		if(modoDepuracion) System.out.println("\t regla 9a"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 19: // type_stmt ::= BOOL dec 
            {
              NodoBase RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase db = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 8x"); 
				       	System.out.println("\t tipo BOOL");
				       	/*RESULT= new NodoEscribir(dc);*/
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_stmt ::= INT dec 
            {
              NodoBase RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase di = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 8x"); 
				       	System.out.println("\t tipo INT");
				       	/*RESULT= new NodoEscribir(dec);*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // write_stmt ::= WRITE exp 
=======
          case 35: // write_stmt ::= WRITE exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 8"); 
				       	RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 16: // read_stmt ::= READ ID 
=======
          case 34: // read_stmt ::= READ ID 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 15: // assign_stmt ::= ID NT$0 ASSIGN exp 
=======
          case 33: // assign_stmt ::= ID NT$0 ASSIGN exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 14: // NT$0 ::= 
=======
          case 32: // NT$0 ::= 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
<<<<<<< HEAD
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
=======
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase as = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cont = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla FOR"); 
							RESULT = new NodoFor(as,ex,se,cont);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 13: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
=======
          case 30: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 12: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
=======
          case 29: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 11: // if_stmt ::= IF exp THEN stmt_seq END 
=======
          case 28: // if_stmt ::= IF exp THEN stmt_seq END 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 10: // stmt ::= error 
=======
          case 27: // stmt ::= error 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 3g"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
<<<<<<< HEAD
          case 9: // stmt ::= type_stmt 
            {
              NodoBase RESULT =null;
		int stypleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stypright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase styp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3f"); 
						RESULT=styp;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= write_stmt 
=======
          case 26: // stmt ::= write_stmt 
>>>>>>> 1ebd54a38944762783d260ab0d3c0c4b5be9eb2c
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b.1"); 
						RESULT=sfor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arg_stmt ::= BOOL ID 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 4"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arg_stmt ::= INT ID 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 3"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arg_stmt ::= INT ID COMA arg_stmt 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arg_stmt ::= BOOL ID COMA arg_stmt 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 1"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cont_type ::= BEGIN RETURN simple_exp SEMI END 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cont_type ::= BEGIN stmt_seq RETURN simple_exp SEMI END 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cont_void ::= BEGIN END 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_void",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cont_void ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_void",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_stmt ::= INT FUNCTION ID LPAREN arg_stmt RPAREN cont_type 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion INT con parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_stmt ::= BOOL FUNCTION ID LPAREN arg_stmt RPAREN cont_type 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion BOOL con parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_stmt ::= VOID FUNCTION ID LPAREN arg_stmt RPAREN cont_void 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion VOID con parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_stmt ::= INT FUNCTION ID LPAREN RPAREN cont_type 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion INT sin parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_stmt ::= BOOL FUNCTION ID LPAREN RPAREN cont_type 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion BOOL sin parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_stmt ::= VOID FUNCTION ID LPAREN RPAREN cont_void 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion VOID sin parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_principal ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("\t Bloque principal");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // start_block ::= start_principal 
            {
              NodoBase RESULT =null;
		System.out.println("\t ir a el bloque principal");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // start_block ::= func_stmt start_block 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("\t Una o mas Funciones");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= start_block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\t regla 1"); 
					ast = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

