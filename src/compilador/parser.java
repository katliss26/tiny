
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 24 07:07:19 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 24 07:07:19 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\007\000" +
    "\002\007\007\000\002\007\007\000\002\010\006\000\002" +
    "\010\006\000\002\010\004\000\002\010\004\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\017\005\000\002\011" +
    "\007\000\002\011\011\000\002\012\007\000\002\013\014" +
    "\000\002\031\005\000\002\020\006\000\002\020\007\000" +
    "\002\021\005\000\002\021\003\000\002\014\006\000\002" +
    "\014\011\000\002\015\005\000\002\016\005\000\002\033" +
    "\005\000\002\033\005\000\002\032\005\000\002\032\003" +
    "\000\002\032\010\000\002\032\006\000\002\022\005\000" +
    "\002\022\003\000\002\023\005\000\002\023\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\030\005\000\002\030\006\000\002\030" +
    "\005\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\006\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\012\004\011\005\012\006\013\011\006\001" +
    "\002\000\004\002\244\001\002\000\004\002\ufffe\001\002" +
    "\000\026\003\060\004\062\006\047\014\051\016\053\022" +
    "\067\026\066\027\046\030\054\031\055\001\002\000\004" +
    "\011\006\001\002\000\004\002\001\001\002\000\004\031" +
    "\036\001\002\000\004\031\031\001\002\000\004\031\014" +
    "\001\002\000\004\046\015\001\002\000\010\004\020\006" +
    "\021\047\016\001\002\000\004\011\ufffa\001\002\000\004" +
    "\047\030\001\002\000\004\031\025\001\002\000\004\031" +
    "\022\001\002\000\006\015\023\047\ufff4\001\002\000\006" +
    "\004\020\006\021\001\002\000\004\047\ufff5\001\002\000" +
    "\006\015\026\047\ufff3\001\002\000\006\004\020\006\021" +
    "\001\002\000\004\047\ufff6\001\002\000\004\011\ufff7\001" +
    "\002\000\004\046\032\001\002\000\010\004\020\006\021" +
    "\047\033\001\002\000\004\011\ufffc\001\002\000\004\047" +
    "\035\001\002\000\004\011\ufff9\001\002\000\004\046\037" +
    "\001\002\000\010\004\020\006\021\047\040\001\002\000" +
    "\004\011\ufffb\001\002\000\004\047\042\001\002\000\004" +
    "\011\ufff8\001\002\000\012\004\011\005\012\006\013\011" +
    "\006\001\002\000\004\002\uffff\001\002\000\034\003\uffef" +
    "\004\uffef\006\uffef\014\uffef\016\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\026\uffef\027\uffef\030\uffef\031\uffef\001\002" +
    "\000\004\031\242\001\002\000\004\031\173\001\002\000" +
    "\034\003\uffed\004\uffed\006\uffed\014\uffed\016\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\001\002\000\016\003\107\007\077\010\103\031\105" +
    "\032\075\046\111\001\002\000\034\003\uffeb\004\uffeb\006" +
    "\uffeb\014\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\001\002\000\016\003" +
    "\107\007\077\010\103\031\105\032\075\046\111\001\002" +
    "\000\016\003\107\007\077\010\103\031\105\032\075\046" +
    "\111\001\002\000\010\024\206\033\210\046\207\001\002" +
    "\000\034\003\uffe8\004\uffe8\006\uffe8\014\uffe8\016\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\001\002\000\030\003\060\004\062\006\047\014" +
    "\051\016\053\021\205\022\067\026\066\027\046\030\054" +
    "\031\055\001\002\000\034\003\uffe7\004\uffe7\006\uffe7\014" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\001\002\000\034\003\ufff0\004" +
    "\ufff0\006\ufff0\014\ufff0\016\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\001\002\000" +
    "\004\031\173\001\002\000\034\003\uffee\004\uffee\006\uffee" +
    "\014\uffee\016\uffee\020\uffee\021\uffee\022\uffee\023\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\001\002\000\034\003\uffe9" +
    "\004\uffe9\006\uffe9\014\uffe9\016\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\001\002" +
    "\000\034\003\uffea\004\uffea\006\uffea\014\uffea\016\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\001\002\000\004\046\157\001\002\000\026\003" +
    "\060\004\062\006\047\014\051\016\053\022\067\026\066" +
    "\027\046\030\054\031\055\001\002\000\034\003\uffec\004" +
    "\uffec\006\uffec\014\uffec\016\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\026\uffec\027\uffec\030\uffec\031\uffec\001\002\000" +
    "\034\003\ufff1\004\ufff1\006\ufff1\014\ufff1\016\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\001\002\000\030\003\060\004\062\006\047\014\051" +
    "\016\053\022\067\023\073\026\066\027\046\030\054\031" +
    "\055\001\002\000\016\003\107\007\077\010\103\031\105" +
    "\032\075\046\111\001\002\000\034\003\ufff2\004\ufff2\006" +
    "\ufff2\014\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\001\002\000\044\012" +
    "\uffbd\013\uffbd\015\uffbd\017\uffbd\025\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\047\uffbd\050\uffbd\001\002\000\044\012\uffc4" +
    "\013\uffc4\015\uffc4\017\uffc4\025\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\127" +
    "\045\126\047\uffc4\050\uffc4\001\002\000\044\012\uffbc\013" +
    "\uffbc\015\uffbc\017\uffbc\025\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\047\uffbc\050\uffbc\001\002\000\004\050\156\001\002" +
    "\000\020\012\uffcc\013\uffcc\015\uffcc\017\uffcc\025\uffcc\047" +
    "\uffcc\050\uffcc\001\002\000\020\012\154\013\uffcf\015\uffcf" +
    "\017\uffcf\025\uffcf\047\uffcf\050\uffcf\001\002\000\044\012" +
    "\uffbb\013\uffbb\015\uffbb\017\uffbb\025\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\047\uffbb\050\uffbb\001\002\000\016\013\152" +
    "\015\uffd1\017\uffd1\025\uffd1\047\uffd1\050\uffd1\001\002\000" +
    "\050\012\uffba\013\uffba\015\uffba\017\uffba\024\140\025\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\141\047\uffba\050\uffba" +
    "\001\002\000\044\012\uffc1\013\uffc1\015\uffc1\017\uffc1\025" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\001" +
    "\002\000\044\012\uffb8\013\uffb8\015\uffb8\017\uffb8\025\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\001\002" +
    "\000\040\012\uffc7\013\uffc7\015\uffc7\017\uffc7\025\uffc7\034" +
    "\114\035\115\036\116\037\121\040\120\041\123\042\117" +
    "\043\122\047\uffc7\050\uffc7\001\002\000\016\003\107\007" +
    "\077\010\103\031\105\032\075\046\111\001\002\000\004" +
    "\047\113\001\002\000\044\012\uffbe\013\uffbe\015\uffbe\017" +
    "\uffbe\025\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050" +
    "\uffbe\001\002\000\016\003\107\007\077\010\103\031\105" +
    "\032\075\046\111\001\002\000\016\003\107\007\077\010" +
    "\103\031\105\032\075\046\111\001\002\000\016\003\107" +
    "\007\077\010\103\031\105\032\075\046\111\001\002\000" +
    "\016\003\107\007\077\010\103\031\105\032\075\046\111" +
    "\001\002\000\016\003\107\007\077\010\103\031\105\032" +
    "\075\046\111\001\002\000\016\003\107\007\077\010\103" +
    "\031\105\032\075\046\111\001\002\000\016\003\107\007" +
    "\077\010\103\031\105\032\075\046\111\001\002\000\016" +
    "\003\107\007\077\010\103\031\105\032\075\046\111\001" +
    "\002\000\024\012\uffcd\013\uffcd\015\uffcd\017\uffcd\025\uffcd" +
    "\042\117\043\122\047\uffcd\050\uffcd\001\002\000\044\012" +
    "\uffc5\013\uffc5\015\uffc5\017\uffc5\025\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\127\045\126\047\uffc5\050\uffc5\001\002\000\016\003\107" +
    "\007\077\010\103\031\105\032\075\046\111\001\002\000" +
    "\016\003\107\007\077\010\103\031\105\032\075\046\111" +
    "\001\002\000\044\012\uffc3\013\uffc3\015\uffc3\017\uffc3\025" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\001" +
    "\002\000\044\012\uffc2\013\uffc2\015\uffc2\017\uffc2\025\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\001\002" +
    "\000\024\012\uffc8\013\uffc8\015\uffc8\017\uffc8\025\uffc8\042" +
    "\117\043\122\047\uffc8\050\uffc8\001\002\000\024\012\uffc9" +
    "\013\uffc9\015\uffc9\017\uffc9\025\uffc9\042\117\043\122\047" +
    "\uffc9\050\uffc9\001\002\000\044\012\uffc6\013\uffc6\015\uffc6" +
    "\017\uffc6\025\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\127\045\126\047\uffc6" +
    "\050\uffc6\001\002\000\024\012\uffca\013\uffca\015\uffca\017" +
    "\uffca\025\uffca\042\117\043\122\047\uffca\050\uffca\001\002" +
    "\000\024\012\uffcb\013\uffcb\015\uffcb\017\uffcb\025\uffcb\042" +
    "\117\043\122\047\uffcb\050\uffcb\001\002\000\024\012\uffce" +
    "\013\uffce\015\uffce\017\uffce\025\uffce\042\117\043\122\047" +
    "\uffce\050\uffce\001\002\000\016\003\107\007\077\010\103" +
    "\031\105\032\075\046\111\001\002\000\020\003\107\007" +
    "\077\010\103\031\105\032\075\046\111\047\144\001\002" +
    "\000\004\047\147\001\002\000\006\015\145\047\uffdd\001" +
    "\002\000\044\012\uffc0\013\uffc0\015\uffc0\017\uffc0\025\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\050\uffc0\001\002" +
    "\000\016\003\107\007\077\010\103\031\105\032\075\046" +
    "\111\001\002\000\004\047\uffde\001\002\000\044\012\uffbf" +
    "\013\uffbf\015\uffbf\017\uffbf\025\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\047\uffbf\050\uffbf\001\002\000\004\025\151\001" +
    "\002\000\044\012\uffb9\013\uffb9\015\uffb9\017\uffb9\025\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\001\002" +
    "\000\016\003\107\007\077\010\103\031\105\032\075\046" +
    "\111\001\002\000\014\015\uffd2\017\uffd2\025\uffd2\047\uffd2" +
    "\050\uffd2\001\002\000\016\003\107\007\077\010\103\031" +
    "\105\032\075\046\111\001\002\000\016\013\uffd0\015\uffd0" +
    "\017\uffd0\025\uffd0\047\uffd0\050\uffd0\001\002\000\034\003" +
    "\uffe3\004\uffe3\006\uffe3\014\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\001" +
    "\002\000\004\031\160\001\002\000\004\033\171\001\002" +
    "\000\004\050\162\001\002\000\016\003\107\007\077\010" +
    "\103\031\105\032\075\046\111\001\002\000\004\050\164" +
    "\001\002\000\004\031\160\001\002\000\004\047\166\001" +
    "\002\000\026\003\060\004\062\006\047\014\051\016\053" +
    "\022\067\026\066\027\046\030\054\031\055\001\002\000" +
    "\030\003\060\004\062\006\047\014\051\016\053\021\170" +
    "\022\067\026\066\027\046\030\054\031\055\001\002\000" +
    "\034\003\uffe2\004\uffe2\006\uffe2\014\uffe2\016\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\001\002\000\016\003\107\007\077\010\103\031\105" +
    "\032\075\046\111\001\002\000\006\047\uffe1\050\uffe1\001" +
    "\002\000\010\015\176\024\177\050\uffd5\001\002\000\004" +
    "\050\175\001\002\000\034\003\uffd7\004\uffd7\006\uffd7\014" +
    "\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\001\002\000\004\031\173\001" +
    "\002\000\004\032\200\001\002\000\004\025\201\001\002" +
    "\000\006\015\202\050\uffd3\001\002\000\004\031\173\001" +
    "\002\000\004\050\uffd4\001\002\000\004\050\uffd6\001\002" +
    "\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd\011\ufffd\001" +
    "\002\000\016\003\107\007\077\010\103\031\105\032\075" +
    "\046\111\001\002\000\020\003\107\007\077\010\103\031" +
    "\105\032\075\046\111\047\214\001\002\000\016\003\107" +
    "\007\077\010\103\031\105\032\075\046\111\001\002\000" +
    "\004\050\212\001\002\000\034\003\uffdc\004\uffdc\006\uffdc" +
    "\014\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\001\002\000\004\047\216" +
    "\001\002\000\004\050\215\001\002\000\034\003\uffe0\004" +
    "\uffe0\006\uffe0\014\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\001\002\000" +
    "\004\050\217\001\002\000\034\003\uffdf\004\uffdf\006\uffdf" +
    "\014\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002\000\004\025\221" +
    "\001\002\000\004\033\222\001\002\000\016\003\107\007" +
    "\077\010\103\031\105\032\075\046\111\001\002\000\004" +
    "\050\224\001\002\000\034\003\uffdb\004\uffdb\006\uffdb\014" +
    "\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\001\002\000\004\050\226\001" +
    "\002\000\034\003\uffd9\004\uffd9\006\uffd9\014\uffd9\016\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\001\002\000\004\017\230\001\002\000\026" +
    "\003\060\004\062\006\047\014\051\016\053\022\067\026" +
    "\066\027\046\030\054\031\055\001\002\000\032\003\060" +
    "\004\062\006\047\014\051\016\053\020\232\021\233\022" +
    "\067\026\066\027\046\030\054\031\055\001\002\000\026" +
    "\003\060\004\062\006\047\014\051\016\053\022\067\026" +
    "\066\027\046\030\054\031\055\001\002\000\034\003\uffe5" +
    "\004\uffe5\006\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002" +
    "\000\030\003\060\004\062\006\047\014\051\016\053\021" +
    "\235\022\067\026\066\027\046\030\054\031\055\001\002" +
    "\000\034\003\uffe4\004\uffe4\006\uffe4\014\uffe4\016\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\001\002\000\004\050\237\001\002\000\034\003" +
    "\uffe6\004\uffe6\006\uffe6\014\uffe6\016\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\001" +
    "\002\000\004\050\241\001\002\000\034\003\uffd8\004\uffd8" +
    "\006\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\001\002\000\004" +
    "\050\243\001\002\000\034\003\uffda\004\uffda\006\uffda\014" +
    "\uffda\016\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\012\002\003\003\007\004\004\007\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\056" +
    "\006\070\011\060\012\044\013\062\014\067\015\051\016" +
    "\064\017\055\020\047\033\063\001\001\000\004\004\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\043\004\004\007\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\237\001\001\000\002\001\001\000\020\022\235" +
    "\023\103\024\101\025\100\026\107\027\075\030\105\001" +
    "\001\000\002\001\001\000\020\022\226\023\103\024\101" +
    "\025\100\026\107\027\075\030\105\001\001\000\020\022" +
    "\224\023\103\024\101\025\100\026\107\027\075\030\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\073\011\060\012\044\013\062\014\067\015\051\016\064" +
    "\017\055\020\047\033\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\071\006\070\011\060\012\044\013\062\014\067" +
    "\015\051\016\064\017\055\020\047\033\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\073\011\060" +
    "\012\044\013\062\014\067\015\051\016\064\017\055\020" +
    "\047\033\063\001\001\000\020\022\077\023\103\024\101" +
    "\025\100\026\107\027\075\030\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\022" +
    "\111\023\103\024\101\025\100\026\107\027\075\030\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\136\027\075\030\105\001\001\000\010\026\135\027\075" +
    "\030\105\001\001\000\010\026\134\027\075\030\105\001" +
    "\001\000\006\027\133\030\105\001\001\000\010\026\132" +
    "\027\075\030\105\001\001\000\010\026\131\027\075\030" +
    "\105\001\001\000\006\027\124\030\105\001\001\000\010" +
    "\026\123\027\075\030\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\130\001\001\000\004\030\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\147\023" +
    "\103\024\101\025\100\026\107\027\075\030\105\001\001" +
    "\000\022\021\141\022\142\023\103\024\101\025\100\026" +
    "\107\027\075\030\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\021\145\022\142\023" +
    "\103\024\101\025\100\026\107\027\075\030\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\152\023\103\024\101\025\100" +
    "\026\107\027\075\030\105\001\001\000\002\001\001\000" +
    "\016\023\154\024\101\025\100\026\107\027\075\030\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\162\023\103\024\101\025\100\026\107\027\075\030" +
    "\105\001\001\000\002\001\001\000\004\031\164\001\001" +
    "\000\002\001\001\000\030\005\166\006\070\011\060\012" +
    "\044\013\062\014\067\015\051\016\064\017\055\020\047" +
    "\033\063\001\001\000\026\006\073\011\060\012\044\013" +
    "\062\014\067\015\051\016\064\017\055\020\047\033\063" +
    "\001\001\000\002\001\001\000\020\022\171\023\103\024" +
    "\101\025\100\026\107\027\075\030\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\022\217\023\103\024\101\025\100\026\107\027\075\030" +
    "\105\001\001\000\022\021\212\022\142\023\103\024\101" +
    "\025\100\026\107\027\075\030\105\001\001\000\020\022" +
    "\210\023\103\024\101\025\100\026\107\027\075\030\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\022\222\023\103\024\101\025\100\026\107\027\075" +
    "\030\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\230\006\070\011\060\012\044\013\062\014\067\015" +
    "\051\016\064\017\055\020\047\033\063\001\001\000\026" +
    "\006\073\011\060\012\044\013\062\014\067\015\051\016" +
    "\064\017\055\020\047\033\063\001\001\000\030\005\233" +
    "\006\070\011\060\012\044\013\062\014\067\015\051\016" +
    "\064\017\055\020\047\033\063\001\001\000\002\001\001" +
    "\000\026\006\073\011\060\012\044\013\062\014\067\015" +
    "\051\016\064\017\055\020\047\033\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	private int ambito=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= ID LCORCH exp RCORCH 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String declaracion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		System.out.println("Vector con una exp adentro");
		RESULT  = new NodoVector(new NodoIdentificador(declaracion.toString()),ex);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005-id");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo BOOLEANO");
						RESULT= new NodoBooleano(false);					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo BOOLEANO");
						RESULT= new NodoBooleano(true);					
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005-numero");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= ID LPAREN arg_call_func RPAREN 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
		       RESULT= new Nodollamar_Funcion(valor.toString(),ex);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
                 RESULT= new Nodollamar_Funcion(valor.toString());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp3 ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp3 ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  
                  if(modoDepuracion) System.out.println("\t regla 9a.3"); 
              	     RESULT = new NodoOperacion(exI,tipoOp.mayor_eq,exD);
                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp3 ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      
                      if(modoDepuracion) System.out.println("\t regla 9a.2"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.menor_eq,exD);
                      
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp3 ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           
                  	if(modoDepuracion) System.out.println("\t regla 9a.1"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp3 ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             		if(modoDepuracion) System.out.println("\t regla 9a"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp2 ::= exp3 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=ex;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp2 ::= simple_exp NEQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			        if(modoDepuracion) System.out.println("\t regla 9b"); 
					RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp2 ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(modoDepuracion) System.out.println("\t regla 9b"); 
					 RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
				    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp1 ::= exp2 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp1 ::= exp2 AND exp1 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					 if(modoDepuracion) System.out.println("\t regla 13b");
					 RESULT=new NodoOperacion(exI,tipoOp.and,exD); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp1 
            {
              NodoBase RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(modoDepuracion) System.out.println("\t regla 13a"); 
						RESULT=lo;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp1 OR exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                if(modoDepuracion) System.out.println("\t regla 13a"); 
					RESULT=new NodoOperacion(exI,tipoOp.or,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= ID LCORCH NUM RCORCH 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            	 if(modoDepuracion) System.out.println("\t regla 11c"); 
	             RESULT = new NodoVector(new NodoIdentificador(nombre.toString()),valor); 
	        	 System.out.println("\t ID"); 
	        	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec ::= ID LCORCH NUM RCORCH COMA dec 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
          		   RESULT = new NodoVector(new NodoIdentificador(nombre.toString()),valor,exD);  
	   			  System.out.println("\t ID"); 
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
                RESULT= new NodoIdentificador(variable.toString());
	        	System.out.println("\t ID"); 
	           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec ::= ID COMA dec 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	             if(modoDepuracion) System.out.println("\t regla 11a"); 
			  	 System.out.println("\t dec"); 
			  	 RESULT= new NodoIdentificador(variable.toString(),ex);
			   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_stmt ::= BOOL dec SEMI 
            {
              NodoBase RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase db = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8x");
                System.out.println("\t tipo BOOL");
                RESULT=new NodoDeclaracion("BOOL",db);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_stmt ::= INT dec SEMI 
            {
              NodoBase RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase di = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8x");
                System.out.println("\t tipo INT");
                RESULT=new NodoDeclaracion("INT",di);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // write_stmt ::= WRITE exp SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8"); 
				       	RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // read_stmt ::= READ ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8"); 
				     System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_stmt ::= ID LCORCH exp RCORCH ASSIGN exp SEMI 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase expre = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				 RESULT=new NodoAsignacion_Vector(new NodoVector(new NodoIdentificador(nombre.toString()),expre),ex);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_stmt ::= ID ASSIGN exp SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(new NodoIdentificador(variable.toString()),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arg_call_func ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					RESULT= new NodoArg_Funcion(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_call_func",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arg_call_func ::= exp COMA arg_call_func 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					RESULT=new NodoArg_Funcion(ex,arg);
					  
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_call_func",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // call_func ::= ID LPAREN arg_call_func RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase arg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t funcion VOID sin parametros"); 
				  RESULT=new Nodollamar_Funcion(variable.toString(),arg);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_func",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // call_func ::= ID LPAREN RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(modoDepuracion) System.out.println("\t funcion sin asignacion y sin parametros"); 
					RESULT=new Nodollamar_Funcion(variable.toString());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_func",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for_assign ::= ID ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(new NodoIdentificador(variable.toString()),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assign",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for_stmt ::= FOR LPAREN for_assign SEMI exp SEMI for_assign RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase inicio = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int comparacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int comparacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase comparacion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aumentoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aumentoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase aumento = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentenciasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentenciasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sentencias = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla FOR"); 
							RESULT = new NodoFor(inicio,comparacion,aumento,sentencias);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp SEMI 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retorna_stmt ::= RETURN exp SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	  if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
       RESULT=new NodoReturn(ex);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorna_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 3g"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= retorna_stmt 
            {
              NodoBase RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase rt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=rt;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= type_stmt 
            {
              NodoBase RESULT =null;
		int stypleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stypright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase styp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3f"); 
						RESULT=styp;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= call_func 
            {
              NodoBase RESULT =null;
		int safunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int safunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase safun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=safun;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b.1"); 
						RESULT=sfor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_seq ::= stmt_seq stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arg_stmt ::= BOOL ID 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 4"); 
					RESULT=new NodoIdentificador("BOOL",nombre,null);	 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arg_stmt ::= INT ID 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 3"); 
				    RESULT=new NodoIdentificador("INT",nombre,null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arg_stmt ::= INT ID COMA arg_stmt 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ar_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ar_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ar_st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					 RESULT=new NodoIdentificador("INT",nombre,ar_st);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // arg_stmt ::= BOOL ID COMA arg_stmt 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ar_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ar_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ar_st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 1"); 
					RESULT=new NodoIdentificador("BOOL",nombre,ar_st);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_stmt ::= INT ID LPAREN arg_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t funcion INT con parametros"); 
					RESULT=new NodoFuncion("INT",new NodoIdentificador(nombre.toString()),ex,null); 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_stmt ::= BOOL ID LPAREN arg_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t funcion BOOL con parametros"); 
					RESULT=new NodoFuncion("BOOL",new NodoIdentificador(nombre.toString()),ex,null); 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_stmt ::= VOID ID LPAREN arg_stmt RPAREN 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t funcion VOID con parametros"); 
					RESULT=new NodoFuncion("VOID",new NodoIdentificador(nombre.toString()),ex,null); 	
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_stmt ::= INT ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t funcion INT sin parametros"); 
					RESULT=new NodoFuncion("INT",new NodoIdentificador(nombre.toString()));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_stmt ::= BOOL ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t funcion BOOL sin parametros");
				    RESULT=new NodoFuncion("BOOL",new NodoIdentificador(nombre.toString()));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_stmt ::= VOID ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t funcion VOID sin parametros"); 

				     RESULT=new NodoFuncion("VOID",new NodoIdentificador(nombre.toString())); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_principal ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("\t Bloque principal");
					RESULT=s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // start_block ::= start_principal 
            {
              NodoBase RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\t ir a el bloque principal");
					RESULT = new NodoPrincipal(null,st,null,ambito);
					ambito++;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // start_block ::= func_stmt start_principal start_block 
            {
              NodoBase RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase fc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cont = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sb = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("\t Una o mas Funciones");
					RESULT = new NodoPrincipal(fc,cont,sb,ambito);
					ambito++; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= start_block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\t regla 1"); 
					ast = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

