
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 13 07:14:00 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 13 07:14:00 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\007\011\000" +
    "\002\007\011\000\002\007\011\000\002\011\005\000\002" +
    "\012\010\000\002\012\007\000\002\010\006\000\002\010" +
    "\006\000\002\010\004\000\002\010\004\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\013\007\000\002\013\011\000\002\014\007" +
    "\000\002\015\014\000\002\040\002\000\002\034\006\000" +
    "\002\022\006\000\002\022\011\000\002\022\010\000\002" +
    "\022\007\000\002\023\005\000\002\023\003\000\002\025" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\005" +
    "\000\002\026\005\000\002\026\003\000\002\024\005\000" +
    "\002\024\006\000\002\024\003\000\002\027\005\000\002" +
    "\027\003\000\002\016\006\000\002\016\011\000\002\017" +
    "\005\000\002\020\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\036\005\000\002\036\005\000" +
    "\002\035\005\000\002\035\003\000\002\035\010\000\002" +
    "\035\006\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\003\000\002\033\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\006\000\002\033\003\000\002\033\003" +
    "\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\012\004\011\005\012\006\013\007\006\001" +
    "\002\000\004\002\313\001\002\000\004\002\ufffe\001\002" +
    "\000\024\003\046\004\051\006\036\015\041\021\055\025" +
    "\052\026\035\027\042\030\043\001\002\000\012\004\011" +
    "\005\012\006\013\007\006\001\002\000\004\002\001\001" +
    "\002\000\004\011\300\001\002\000\004\011\265\001\002" +
    "\000\004\011\014\001\002\000\004\030\015\001\002\000" +
    "\004\045\016\001\002\000\010\004\021\006\022\046\017" +
    "\001\002\000\004\007\033\001\002\000\004\046\031\001" +
    "\002\000\004\030\026\001\002\000\004\030\023\001\002" +
    "\000\006\014\024\046\ufff1\001\002\000\006\004\021\006" +
    "\022\001\002\000\004\046\ufff2\001\002\000\006\014\027" +
    "\046\ufff0\001\002\000\006\004\021\006\022\001\002\000" +
    "\004\046\ufff3\001\002\000\004\007\033\001\002\000\012" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\001\002\000\026\003" +
    "\046\004\051\006\036\013\037\015\041\021\055\025\052" +
    "\026\035\027\042\030\043\001\002\000\034\003\uffec\004" +
    "\uffec\006\uffec\013\uffec\015\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\025\uffec\026\uffec\027\uffec\030\uffec\001\002\000" +
    "\004\030\262\001\002\000\004\030\152\001\002\000\014" +
    "\003\072\030\071\031\064\042\063\045\075\001\002\000" +
    "\034\003\uffe8\004\uffe8\006\uffe8\013\uffe8\015\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\001\002\000\014\003\072\030\071\031\064\042\063" +
    "\045\075\001\002\000\014\003\072\030\071\031\064\042" +
    "\063\045\075\001\002\000\010\023\170\032\172\045\171" +
    "\001\002\000\034\003\uffea\004\uffea\006\uffea\013\uffea\015" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\025\uffea\026\uffea" +
    "\027\uffea\030\uffea\001\002\000\026\003\046\004\051\006" +
    "\036\013\164\015\041\021\055\025\052\026\035\027\042" +
    "\030\043\001\002\000\034\003\uffe5\004\uffe5\006\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\001\002\000\034\003\uffed\004" +
    "\uffed\006\uffed\013\uffed\015\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\025\uffed\026\uffed\027\uffed\030\uffed\001\002\000" +
    "\034\003\uffeb\004\uffeb\006\uffeb\013\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\001\002\000\004\030\152\001\002\000\004\045\135" +
    "\001\002\000\034\003\uffe6\004\uffe6\006\uffe6\013\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\001\002\000\034\003\uffe7\004\uffe7\006" +
    "\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\001\002\000\024\003" +
    "\046\004\051\006\036\015\041\021\055\025\052\026\035" +
    "\027\042\030\043\001\002\000\034\003\uffe9\004\uffe9\006" +
    "\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\001\002\000\034\003" +
    "\uffee\004\uffee\006\uffee\013\uffee\015\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\025\uffee\026\uffee\027\uffee\030\uffee\001" +
    "\002\000\026\003\046\004\051\006\036\015\041\021\055" +
    "\022\061\025\052\026\035\027\042\030\043\001\002\000" +
    "\014\003\072\030\071\031\064\042\063\045\075\001\002" +
    "\000\034\003\uffef\004\uffef\006\uffef\013\uffef\015\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\001\002\000\014\003\072\030\071\031\064\042" +
    "\063\045\075\001\002\000\044\010\uffb2\012\uffb2\014\uffb2" +
    "\016\uffb2\024\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2" +
    "\047\uffb2\001\002\000\044\010\uffb7\012\uffb7\014\uffb7\016" +
    "\uffb7\024\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\114\044\113\046\uffb7\047" +
    "\uffb7\001\002\000\012\010\130\012\131\016\uffc7\047\uffc7" +
    "\001\002\000\004\047\127\001\002\000\044\010\uffaf\012" +
    "\uffaf\014\uffaf\016\uffaf\024\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\046\uffaf\047\uffaf\001\002\000\046\010\uffb1\012\uffb1" +
    "\014\uffb1\016\uffb1\023\124\024\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\046\uffb1\047\uffb1\001\002\000\044\010\uffae\012" +
    "\uffae\014\uffae\016\uffae\024\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\046\uffae\047\uffae\001\002\000\044\010\uffb4\012\uffb4" +
    "\014\uffb4\016\uffb4\024\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\046\uffb4\047\uffb4\001\002\000\036\010\uffba\012\uffba\014" +
    "\uffba\016\uffba\033\100\034\101\035\102\036\106\037\104" +
    "\040\107\041\103\042\105\046\uffba\047\uffba\001\002\000" +
    "\014\003\072\030\071\031\064\042\063\045\075\001\002" +
    "\000\004\046\077\001\002\000\044\010\uffb3\012\uffb3\014" +
    "\uffb3\016\uffb3\024\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046" +
    "\uffb3\047\uffb3\001\002\000\014\003\072\030\071\031\064" +
    "\042\063\045\075\001\002\000\014\003\072\030\071\031" +
    "\064\042\063\045\075\001\002\000\014\003\072\030\071" +
    "\031\064\042\063\045\075\001\002\000\014\003\072\030" +
    "\071\031\064\042\063\045\075\001\002\000\014\003\072" +
    "\030\071\031\064\042\063\045\075\001\002\000\014\003" +
    "\072\030\071\031\064\042\063\045\075\001\002\000\014" +
    "\003\072\030\071\031\064\042\063\045\075\001\002\000" +
    "\014\003\072\030\071\031\064\042\063\045\075\001\002" +
    "\000\022\010\uffbb\012\uffbb\014\uffbb\016\uffbb\041\103\042" +
    "\105\046\uffbb\047\uffbb\001\002\000\022\010\uffbd\012\uffbd" +
    "\014\uffbd\016\uffbd\041\103\042\105\046\uffbd\047\uffbd\001" +
    "\002\000\044\010\uffb8\012\uffb8\014\uffb8\016\uffb8\024\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\114\044\113\046\uffb8\047\uffb8\001\002" +
    "\000\014\003\072\030\071\031\064\042\063\045\075\001" +
    "\002\000\014\003\072\030\071\031\064\042\063\045\075" +
    "\001\002\000\044\010\uffb6\012\uffb6\014\uffb6\016\uffb6\024" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046\uffb6\047\uffb6\001" +
    "\002\000\044\010\uffb5\012\uffb5\014\uffb5\016\uffb5\024\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5\001\002" +
    "\000\022\010\uffbe\012\uffbe\014\uffbe\016\uffbe\041\103\042" +
    "\105\046\uffbe\047\uffbe\001\002\000\044\010\uffb9\012\uffb9" +
    "\014\uffb9\016\uffb9\024\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\114\044\113" +
    "\046\uffb9\047\uffb9\001\002\000\022\010\uffbf\012\uffbf\014" +
    "\uffbf\016\uffbf\041\103\042\105\046\uffbf\047\uffbf\001\002" +
    "\000\022\010\uffc0\012\uffc0\014\uffc0\016\uffc0\041\103\042" +
    "\105\046\uffc0\047\uffc0\001\002\000\022\010\uffbc\012\uffbc" +
    "\014\uffbc\016\uffbc\041\103\042\105\046\uffbc\047\uffbc\001" +
    "\002\000\014\003\072\030\071\031\064\042\063\045\075" +
    "\001\002\000\010\024\126\041\103\042\105\001\002\000" +
    "\044\010\uffb0\012\uffb0\014\uffb0\016\uffb0\024\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\001\002\000\034" +
    "\003\uffe2\004\uffe2\006\uffe2\013\uffe2\015\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\001\002\000\014\003\072\030\071\031\064\042\063\045" +
    "\075\001\002\000\014\003\072\030\071\031\064\042\063" +
    "\045\075\001\002\000\006\016\uffc9\047\uffc9\001\002\000" +
    "\006\016\uffc8\047\uffc8\001\002\000\044\010\uffad\012\uffad" +
    "\014\uffad\016\uffad\024\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\046\uffad\047\uffad\001\002\000\004\030\136\001\002\000" +
    "\004\032\uffe0\001\002\000\004\047\140\001\002\000\014" +
    "\003\072\030\071\031\064\042\063\045\075\001\002\000" +
    "\004\047\142\001\002\000\004\030\136\001\002\000\004" +
    "\046\144\001\002\000\024\003\046\004\051\006\036\015" +
    "\041\021\055\025\052\026\035\027\042\030\043\001\002" +
    "\000\026\003\046\004\051\006\036\015\041\020\146\021" +
    "\055\025\052\026\035\027\042\030\043\001\002\000\034" +
    "\003\uffe1\004\uffe1\006\uffe1\013\uffe1\015\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\001\002\000\004\032\150\001\002\000\014\003\072\030" +
    "\071\031\064\042\063\045\075\001\002\000\006\046\uffdf" +
    "\047\uffdf\001\002\000\010\014\155\023\156\047\uffc3\001" +
    "\002\000\004\047\154\001\002\000\034\003\uffc5\004\uffc5" +
    "\006\uffc5\013\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\001\002\000\004" +
    "\030\152\001\002\000\014\003\072\030\071\031\064\042" +
    "\063\045\075\001\002\000\010\024\160\041\103\042\105" +
    "\001\002\000\006\014\161\047\uffc1\001\002\000\004\030" +
    "\152\001\002\000\004\047\uffc2\001\002\000\004\047\uffc4" +
    "\001\002\000\014\003\072\030\071\031\064\042\063\045" +
    "\075\001\002\000\010\041\103\042\105\047\166\001\002" +
    "\000\004\020\167\001\002\000\012\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\001\002\000\014\003\072\030\071\031\064" +
    "\042\063\045\075\001\002\000\016\003\072\030\200\031" +
    "\064\042\063\045\075\046\232\001\002\000\014\003\072" +
    "\030\174\031\064\042\063\045\075\001\002\000\004\047" +
    "\231\001\002\000\034\023\124\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\175\047\uffb1\001\002\000\016\003\072\030\200" +
    "\031\064\042\063\045\075\046\202\001\002\000\012\014" +
    "\uffd9\041\211\042\212\046\uffd9\001\002\000\016\014\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\001\002\000" +
    "\022\014\uffb1\023\124\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\222\046\uffb1\001\002\000\016\014\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\046\uffd0\001\002\000\004\047\221" +
    "\001\002\000\016\014\uffd6\041\uffd6\042\uffd6\043\215\044" +
    "\214\046\uffd6\001\002\000\006\014\205\046\206\001\002" +
    "\000\014\003\072\030\200\031\064\042\063\045\075\001" +
    "\002\000\004\047\207\001\002\000\034\003\uffdd\004\uffdd" +
    "\006\uffdd\013\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\001\002\000\012" +
    "\014\uffda\041\211\042\212\046\uffda\001\002\000\014\003" +
    "\072\030\200\031\064\042\063\045\075\001\002\000\014" +
    "\003\072\030\200\031\064\042\063\045\075\001\002\000" +
    "\016\014\uffd7\041\uffd7\042\uffd7\043\215\044\214\046\uffd7" +
    "\001\002\000\014\003\072\030\200\031\064\042\063\045" +
    "\075\001\002\000\014\003\072\030\200\031\064\042\063" +
    "\045\075\001\002\000\016\014\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\046\uffd4\001\002\000\016\014\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\046\uffd5\001\002\000\016\014" +
    "\uffd8\041\uffd8\042\uffd8\043\215\044\214\046\uffd8\001\002" +
    "\000\034\003\uffdc\004\uffdc\006\uffdc\013\uffdc\015\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\001\002\000\016\003\072\030\071\031\064\042" +
    "\063\045\075\046\225\001\002\000\006\014\226\046\227" +
    "\001\002\000\006\014\uffce\046\uffce\001\002\000\016\014" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\001\002" +
    "\000\014\003\072\030\071\031\064\042\063\045\075\001" +
    "\002\000\016\014\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\046\uffd1\001\002\000\006\014\uffcf\046\uffcf\001\002\000" +
    "\034\003\uffcd\004\uffcd\006\uffcd\013\uffcd\015\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\001\002\000\004\047\236\001\002\000\006\014\205" +
    "\046\234\001\002\000\004\047\235\001\002\000\034\003" +
    "\uffdb\004\uffdb\006\uffdb\013\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\001" +
    "\002\000\034\003\uffde\004\uffde\006\uffde\013\uffde\015\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\001\002\000\010\024\240\041\103\042\105" +
    "\001\002\000\004\032\241\001\002\000\014\003\072\030" +
    "\071\031\064\042\063\045\075\001\002\000\004\047\243" +
    "\001\002\000\034\003\uffcc\004\uffcc\006\uffcc\013\uffcc\015" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\001\002\000\004\047\245\001\002\000" +
    "\034\003\uffca\004\uffca\006\uffca\013\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\001\002\000\004\016\247\001\002\000\024\003\046" +
    "\004\051\006\036\015\041\021\055\025\052\026\035\027" +
    "\042\030\043\001\002\000\030\003\046\004\051\006\036" +
    "\015\041\017\251\020\252\021\055\025\052\026\035\027" +
    "\042\030\043\001\002\000\024\003\046\004\051\006\036" +
    "\015\041\021\055\025\052\026\035\027\042\030\043\001" +
    "\002\000\034\003\uffe4\004\uffe4\006\uffe4\013\uffe4\015\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\001\002\000\026\003\046\004\051\006\036" +
    "\015\041\020\254\021\055\025\052\026\035\027\042\030" +
    "\043\001\002\000\034\003\uffe3\004\uffe3\006\uffe3\013\uffe3" +
    "\015\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\001\002\000\010\041\103\042\105" +
    "\047\256\001\002\000\004\020\257\001\002\000\012\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\001\002\000\004\047\261" +
    "\001\002\000\034\003\uffc6\004\uffc6\006\uffc6\013\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\001\002\000\004\047\263\001\002\000" +
    "\034\003\uffcb\004\uffcb\006\uffcb\013\uffcb\015\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\001\002\000\012\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\001\002\000\004\030\266\001\002\000\004\045\267\001" +
    "\002\000\010\004\021\006\022\046\270\001\002\000\004" +
    "\007\274\001\002\000\004\046\272\001\002\000\004\007" +
    "\274\001\002\000\012\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\001\002\000\024\003\046\004\051\006\036\015\041\021" +
    "\055\025\052\026\035\027\042\030\043\001\002\000\026" +
    "\003\046\004\051\006\036\015\041\020\276\021\055\025" +
    "\052\026\035\027\042\030\043\001\002\000\012\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\001\002\000\012\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\001\002\000\004\030\301\001\002" +
    "\000\004\045\302\001\002\000\010\004\021\006\022\046" +
    "\303\001\002\000\004\007\033\001\002\000\004\046\305" +
    "\001\002\000\004\007\033\001\002\000\012\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\001\002\000\012\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\001\002\000\004\002\uffff\001\002\000" +
    "\026\003\046\004\051\006\036\015\041\020\312\021\055" +
    "\025\052\026\035\027\042\030\043\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\012\002\003\003\007\004\004\007\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\310" +
    "\006\056\013\046\014\033\015\047\016\055\017\037\020" +
    "\053\022\043\036\052\001\001\000\010\003\307\004\004" +
    "\007\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\017\001\001\000\004\012\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\027\001\001\000\002" +
    "\001\001\000\004\012\031\001\001\000\002\001\001\000" +
    "\026\005\044\006\056\013\046\014\033\015\047\016\055" +
    "\017\037\020\053\022\043\036\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\257\001\001\000\012" +
    "\031\254\032\064\033\072\037\067\001\001\000\002\001" +
    "\001\000\016\021\245\030\065\031\073\032\064\033\072" +
    "\037\067\001\001\000\014\030\243\031\073\032\064\033" +
    "\072\037\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\061\013\046\014\033\015\047\016\055\017" +
    "\037\020\053\022\043\036\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\057\006\056\013\046\014\033\015\047\016" +
    "\055\017\037\020\053\022\043\036\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\006\061\013\046\014" +
    "\033\015\047\016\055\017\037\020\053\022\043\036\052" +
    "\001\001\000\016\021\066\030\065\031\073\032\064\033" +
    "\072\037\067\001\001\000\002\001\001\000\006\033\133" +
    "\037\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\075\031\073\032\064\033\072\037\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\122\032\064\033\072\037\067\001\001\000\012\031\121" +
    "\032\064\033\072\037\067\001\001\000\012\031\120\032" +
    "\064\033\072\037\067\001\001\000\010\032\117\033\072" +
    "\037\067\001\001\000\012\031\116\032\064\033\072\037" +
    "\067\001\001\000\010\032\111\033\072\037\067\001\001" +
    "\000\012\031\110\032\064\033\072\037\067\001\001\000" +
    "\012\031\107\032\064\033\072\037\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\115\037\067\001\001\000\006\033\114\037\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\124\032\064\033\072\037\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\132\030\065\031\073\032\064\033\072\037" +
    "\067\001\001\000\016\021\131\030\065\031\073\032\064" +
    "\033\072\037\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\136\001\001\000\004" +
    "\040\146\001\001\000\002\001\001\000\014\030\140\031" +
    "\073\032\064\033\072\037\067\001\001\000\002\001\001" +
    "\000\004\034\142\001\001\000\002\001\001\000\026\005" +
    "\144\006\056\013\046\014\033\015\047\016\055\017\037" +
    "\020\053\022\043\036\052\001\001\000\024\006\061\013" +
    "\046\014\033\015\047\016\055\017\037\020\053\022\043" +
    "\036\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\030\150\031\073\032\064\033\072\037\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\162\001\001\000\012\031\156" +
    "\032\064\033\072\037\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\164\032\064\033\072\037" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\236\032\064\033\072\037\067\001" +
    "\001\000\016\023\232\024\176\025\175\026\202\033\200" +
    "\037\067\001\001\000\014\030\172\031\073\032\064\033" +
    "\072\037\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\203\024\176\025\175\026\202\033\200\037" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\176\025\207\026\202" +
    "\033\200\037\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\176\026\217\033\200" +
    "\037\067\001\001\000\012\024\176\026\212\033\200\037" +
    "\067\001\001\000\002\001\001\000\010\024\216\033\200" +
    "\037\067\001\001\000\010\024\215\033\200\037\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\222\030\223\031\073\032" +
    "\064\033\072\037\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\030\227\031\073\032" +
    "\064\033\072\037\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\241\031" +
    "\073\032\064\033\072\037\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\247\006\056\013\046\014\033" +
    "\015\047\016\055\017\037\020\053\022\043\036\052\001" +
    "\001\000\024\006\061\013\046\014\033\015\047\016\055" +
    "\017\037\020\053\022\043\036\052\001\001\000\026\005" +
    "\252\006\056\013\046\014\033\015\047\016\055\017\037" +
    "\020\053\022\043\036\052\001\001\000\002\001\001\000" +
    "\024\006\061\013\046\014\033\015\047\016\055\017\037" +
    "\020\053\022\043\036\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\270\001\001\000\004\011\276\001\001\000" +
    "\002\001\001\000\004\011\272\001\001\000\002\001\001" +
    "\000\026\005\274\006\056\013\046\014\033\015\047\016" +
    "\055\017\037\020\053\022\043\036\052\001\001\000\024" +
    "\006\061\013\046\014\033\015\047\016\055\017\037\020" +
    "\053\022\043\036\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\303\001\001\000\004\012\306\001\001\000\002\001\001" +
    "\000\004\012\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\061\013\046\014\033" +
    "\015\047\016\055\017\037\020\053\022\043\036\052\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // numNeg ::= MINUS factor 
            {
              NodoBase RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int negright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase neg = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							System.out.println("\t negativo"); 
							RESULT = neg;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numNeg",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= numNeg 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							System.out.println("numNeg");
							/*CrearNodo*/
							/*RESULT = ex;*/
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= ID LCORCH simple_exp RCORCH 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String declaracion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		System.out.println("HEE DECLARE UN VECTOR");
		/*RESULT  = NodoVector(declaracion,sp);*/
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= simple_exp NEQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				  if(modoDepuracion) System.out.println("\t regla 9b"); 
					   RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
				  
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(modoDepuracion) System.out.println("\t regla 9b"); 
					   RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  
                  if(modoDepuracion) System.out.println("\t regla 9a.3"); 
              	     RESULT = new NodoOperacion(exI,tipoOp.mayor_eq,exD);
                  
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      
                      if(modoDepuracion) System.out.println("\t regla 9a.2"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.menor_eq,exD);
                      
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           
                  	if(modoDepuracion) System.out.println("\t regla 9a.1"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             		if(modoDepuracion) System.out.println("\t regla 9a"); 
              		   RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dec ::= ID LCORCH simple_exp RCORCH 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
	             RESULT = new NodoVector(nombre.toString(),ex); 
	        System.out.println("\t ID"); 
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dec ::= ID LCORCH simple_exp RCORCH COMA dec 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
          		  RESULT = new NodoVector(var.toString(),ex,exD); 
	   
	        System.out.println("\t ID"); 
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec ::= ID 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11c"); 
            /*CrearNodo?*/
	        /*RESULT=ex;*/
	        System.out.println("\t ID"); 
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec ::= ID COMA dec 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 11a"); 
							System.out.println("\t dec"); 
							/*CrearNodo?*/
							 
                                                
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_stmt ::= BOOL dec SEMI 
            {
              NodoBase RESULT =null;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase db = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8x"); 
				       	System.out.println("\t tipo BOOL");
				         RESULT=db;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_stmt ::= INT dec SEMI 
            {
              NodoBase RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase di = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8x"); 
				       	System.out.println("\t tipo INT");
				       	RESULT=di;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_stmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logic_stmt ::= exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logic_stmt ::= exp AND logic_stmt 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					 if(modoDepuracion) System.out.println("\t regla 13b");
					 RESULT=new NodoOperacion(exI,tipoOp.and,exD); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logic_stmt ::= exp OR logic_stmt 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                if(modoDepuracion) System.out.println("\t regla 13a"); 
					RESULT=new NodoOperacion(exI,tipoOp.or,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // write_stmt ::= WRITE exp SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 8"); 
				       	RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // read_stmt ::= READ ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assign_stmt ::= ID LCORCH simple_exp RCORCH ASSIGN exp SEMI 
            {
              NodoBase RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String declaracion = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase sp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.out.println("HEE DECLARE UN VECTOR");
					/*RESULT  = NodoVector(declaracion,sp);*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign_stmt ::= ID ASSIGN exp SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arg_assign_type ::= exp 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_assign_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arg_assign_type ::= arg_assign_type COMA exp 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_assign_type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arg_element ::= factor 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_element",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arg_element ::= ID LPAREN arg_assign_type RPAREN 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_element",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arg_element ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_element",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arg_div_mult ::= arg_element 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_div_mult",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arg_div_mult ::= arg_div_mult TIMES arg_element 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_div_mult",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arg_div_mult ::= arg_div_mult OVER arg_element 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_div_mult",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arg_sum_resta ::= arg_div_mult 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_sum_resta",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arg_sum_resta ::= arg_sum_resta MINUS arg_div_mult 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_sum_resta",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arg_sum_resta ::= arg_sum_resta PLUS arg_div_mult 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_sum_resta",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arg_assign_stmt ::= arg_sum_resta 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_assign_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arg_assign_stmt ::= arg_assign_stmt COMA arg_sum_resta 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion VOID sin parametros"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_assign_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_Func ::= ID LPAREN arg_assign_stmt RPAREN SEMI 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion VOID sin parametros"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_Func",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_Func ::= ID ASSIGN ID LPAREN RPAREN SEMI 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion con asignacion y sin parametros"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_Func",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign_Func ::= ID ASSIGN ID LPAREN arg_assign_stmt RPAREN SEMI 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion sin asignacion y con parametros"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_Func",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign_Func ::= ID LPAREN RPAREN SEMI 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t funcion sin asignacion y sin parametros"); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_Func",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_assign ::= ID NT$0 ASSIGN exp 
            {
              NodoBase RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoBase) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assign",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for_stmt ::= FOR LPAREN for_assign SEMI exp SEMI for_assign RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase as = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase se = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cont = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla FOR"); 
							RESULT = new NodoFor(as,ex,se,cont);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // repeat_stmt ::= REPEAT stmt_seq UNTIL logic_stmt SEMI 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_stmt ::= IF logic_stmt THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_stmt ::= IF logic_stmt THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla 3g"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= type_stmt 
            {
              NodoBase RESULT =null;
		int stypleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stypright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase styp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3f"); 
						RESULT=styp;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= assign_Func 
            {
              NodoBase RESULT =null;
		int safunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int safunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase safun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=safun;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b.1"); 
						RESULT=sfor;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_seq ::= stmt_seq stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arg_stmt ::= BOOL ID 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 4"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arg_stmt ::= INT ID 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t Argumento 3"); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arg_stmt ::= INT ID COMA arg_stmt 
            {
              NodoBase RESULT =null;
		int ar_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ar_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ar_st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 2"); 
					/*RETURN=:ar_st;*/
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arg_stmt ::= BOOL ID COMA arg_stmt 
            {
              NodoBase RESULT =null;
		int ar_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ar_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ar_st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t Argumento 1"); 
					/*RETURN=:ar_st;*/
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cont_type ::= BEGIN RETURN simple_exp SEMI END 
            {
              NodoBase RESULT =null;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase s_e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t funcion INT con parametros"); 
					RESULT=s_e;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cont_type ::= BEGIN stmt_seq RETURN simple_exp SEMI END 
            {
              NodoBase RESULT =null;
		int st_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int st_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase st_s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s_eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s_eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase s_e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t funcion INT con parametros"); 
					RESULT=st_s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cont_void ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int st_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase st_s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t funcion INT con parametros"); 
					RESULT=st_s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cont_void",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_stmt ::= INT FUNCTION ID LPAREN arg_stmt RPAREN cont_type 
            {
              NodoBase RESULT =null;
		int cont_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cont_t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t funcion INT con parametros"); 
					RESULT=cont_t;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_stmt ::= BOOL FUNCTION ID LPAREN arg_stmt RPAREN cont_type 
            {
              NodoBase RESULT =null;
		int cont_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cont_t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t funcion BOOL con parametros"); 
					RESULT=cont_t;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_stmt ::= VOID FUNCTION ID LPAREN arg_stmt RPAREN cont_void 
            {
              NodoBase RESULT =null;
		int cont_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cont_v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t funcion VOID con parametros"); 
					RESULT=cont_v;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_stmt ::= INT FUNCTION ID LPAREN RPAREN cont_type 
            {
              NodoBase RESULT =null;
		int cont_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cont_t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t funcion INT sin parametros"); 
					RESULT=cont_t;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_stmt ::= BOOL FUNCTION ID LPAREN RPAREN cont_type 
            {
              NodoBase RESULT =null;
		int cont_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cont_t = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t funcion BOOL sin parametros");
					RESULT=cont_t; 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_stmt ::= VOID FUNCTION ID LPAREN RPAREN cont_void 
            {
              NodoBase RESULT =null;
		int cont_vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cont_vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cont_v = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t funcion VOID sin parametros"); 
					RESULT=cont_v;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // start_principal ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("\t Bloque principal");
					RESULT=s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // start_block ::= start_principal 
            {
              NodoBase RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\t ir a el bloque principal");
					RESULT = st;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // start_block ::= func_stmt start_block 
            {
              NodoBase RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase fc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					System.out.println("\t Una o mas Funciones");
					RESULT = fc;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= start_block 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\t regla 1"); 
					ast = s;

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

